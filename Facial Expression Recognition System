{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "nIkHatX5bwJr"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UHHOelhfyUmz"
   },
   "source": [
    "Facial Expression Recognition System\n",
    "\n",
    "Name: Abanoub Wagdy Shafik \n",
    "\n",
    "Student ID: 202100596"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1547,
     "status": "ok",
     "timestamp": 1672494670756,
     "user": {
      "displayName": "Mohamed Gomaa Abdallah (DEV)",
      "userId": "16897319570317139246"
     },
     "user_tz": -120
    },
    "id": "h75sedmSIWKD",
    "outputId": "b7cbbde2-b951-48bf-8656-e9886d682b3a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2022-12-31 13:51:09--  https://www.dropbox.com/s/si11cws2pyho1bp/archive.zip\n",
      "Resolving www.dropbox.com (www.dropbox.com)... 162.125.1.18, 2620:100:6016:18::a27d:112\n",
      "Connecting to www.dropbox.com (www.dropbox.com)|162.125.1.18|:443... connected.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: /s/raw/si11cws2pyho1bp/archive.zip [following]\n",
      "--2022-12-31 13:51:09--  https://www.dropbox.com/s/raw/si11cws2pyho1bp/archive.zip\n",
      "Reusing existing connection to www.dropbox.com:443.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: https://uc9cbca822c49633be31faa66471.dl.dropboxusercontent.com/cd/0/inline/Bzro5bxkT4lw20FLT4d8LtmIJQ-INsDIRYvyvEYh6_OSl3DOPV-qaPegDBjM8sY58mxZ1CIC1IF6Zx8H7fDcsZqw9jlX0y8J2MMxfQlsvAIij_gSHclWvi2V6MPOmcnyytYx-BU8R0kEF8xvYRY0kW4s5XrkeSoruUL_3ghps9vqbQ/file# [following]\n",
      "--2022-12-31 13:51:10--  https://uc9cbca822c49633be31faa66471.dl.dropboxusercontent.com/cd/0/inline/Bzro5bxkT4lw20FLT4d8LtmIJQ-INsDIRYvyvEYh6_OSl3DOPV-qaPegDBjM8sY58mxZ1CIC1IF6Zx8H7fDcsZqw9jlX0y8J2MMxfQlsvAIij_gSHclWvi2V6MPOmcnyytYx-BU8R0kEF8xvYRY0kW4s5XrkeSoruUL_3ghps9vqbQ/file\n",
      "Resolving uc9cbca822c49633be31faa66471.dl.dropboxusercontent.com (uc9cbca822c49633be31faa66471.dl.dropboxusercontent.com)... 162.125.1.15, 2620:100:6016:15::a27d:10f\n",
      "Connecting to uc9cbca822c49633be31faa66471.dl.dropboxusercontent.com (uc9cbca822c49633be31faa66471.dl.dropboxusercontent.com)|162.125.1.15|:443... connected.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: /cd/0/inline2/BzpceDrmb9_VwiJvOJ_PibFSxrFoTlCSUmfx5lD5KVbyYj6GG8Hhdv0kVYY3o7qvOy-JAdBzzDyvpn3ok4V3dKebY33Ti7Lp0EKdqkj6OErDPtFIyejbvLKinhRztrcYVGTtCZhhMqkO_cRXz6AI58hv4ByD3MJ9LzLBQ7-wm9_1smn85PRzFN9Efs45GrI5AmgKwapjCO4NTknmHM_LZaGKuljtb2H5lA3lEe7mCpUAge7x0dWjEw7T1f8IYO1Dlj7j83lmXQoYrOk-AZneTKzpw0V5Hrrdsow6U660Fyu7YuYMUw9F16y9u7K7fXto-pU4l_7OWobAD3LJjSwoXtE6ZefX6eIMpUsxTzI5r5yw6hLL3PvQn9LDJB0vYkaifkeFYEDhBGoeRYZyyzTkIqiTMMtr8p2SCSiVwtaCPJo4Nw/file [following]\n",
      "--2022-12-31 13:51:10--  https://uc9cbca822c49633be31faa66471.dl.dropboxusercontent.com/cd/0/inline2/BzpceDrmb9_VwiJvOJ_PibFSxrFoTlCSUmfx5lD5KVbyYj6GG8Hhdv0kVYY3o7qvOy-JAdBzzDyvpn3ok4V3dKebY33Ti7Lp0EKdqkj6OErDPtFIyejbvLKinhRztrcYVGTtCZhhMqkO_cRXz6AI58hv4ByD3MJ9LzLBQ7-wm9_1smn85PRzFN9Efs45GrI5AmgKwapjCO4NTknmHM_LZaGKuljtb2H5lA3lEe7mCpUAge7x0dWjEw7T1f8IYO1Dlj7j83lmXQoYrOk-AZneTKzpw0V5Hrrdsow6U660Fyu7YuYMUw9F16y9u7K7fXto-pU4l_7OWobAD3LJjSwoXtE6ZefX6eIMpUsxTzI5r5yw6hLL3PvQn9LDJB0vYkaifkeFYEDhBGoeRYZyyzTkIqiTMMtr8p2SCSiVwtaCPJo4Nw/file\n",
      "Reusing existing connection to uc9cbca822c49633be31faa66471.dl.dropboxusercontent.com:443.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 63252113 (60M) [application/zip]\n",
      "Saving to: ‘archive.zip’\n",
      "\n",
      "archive.zip         100%[===================>]  60.32M   149MB/s    in 0.4s    \n",
      "\n",
      "2022-12-31 13:51:11 (149 MB/s) - ‘archive.zip’ saved [63252113/63252113]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget https://www.dropbox.com/s/si11cws2pyho1bp/archive.zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "BRXCr01SIfrt"
   },
   "outputs": [],
   "source": [
    "!unzip -q \"/content/archive.zip\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "4fa10W0-IgRZ"
   },
   "outputs": [],
   "source": [
    "# Imports required for this project\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pathlib import Path\n",
    "\n",
    "tf.random.set_seed(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "EzKbwX9lIiHp"
   },
   "outputs": [],
   "source": [
    "# Creating the Pathlib PATH objects\n",
    "train_path = Path(\"/content/train\")\n",
    "test_path = Path(\"/content/test\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "koQo9Xk-Ikqa",
    "outputId": "1499880a-c134-4e39-ac8b-04caba74093d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/content/train/surprise/Training_88269327.jpg',\n",
       " '/content/train/surprise/Training_19549301.jpg',\n",
       " '/content/train/surprise/Training_64054894.jpg',\n",
       " '/content/train/surprise/Training_48991307.jpg',\n",
       " '/content/train/surprise/Training_87518128.jpg',\n",
       " '/content/train/surprise/Training_67480840.jpg',\n",
       " '/content/train/surprise/Training_27007291.jpg',\n",
       " '/content/train/surprise/Training_92846416.jpg',\n",
       " '/content/train/surprise/Training_9342491.jpg',\n",
       " '/content/train/surprise/Training_34604651.jpg']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting Image paths \n",
    "train_image_paths = list(train_path.glob(\"*/*\"))\n",
    "train_image_paths = list(map(lambda x : str(x) , train_image_paths))\n",
    "\n",
    "train_image_paths[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7H-1n5nrImtK",
    "outputId": "00ab68da-fe5e-4289-8515-0f690037f501"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['surprise',\n",
       " 'surprise',\n",
       " 'surprise',\n",
       " 'surprise',\n",
       " 'surprise',\n",
       " 'surprise',\n",
       " 'surprise',\n",
       " 'surprise',\n",
       " 'surprise',\n",
       " 'surprise']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting their respective labels \n",
    "\n",
    "def get_label(image_path):\n",
    "    return image_path.split(\"/\")[-2]\n",
    "\n",
    "train_image_labels = list(map(lambda x : get_label(x) , train_image_paths))\n",
    "train_image_labels[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xWxkLY_WIpmb",
    "outputId": "e3048e61-2912-4215-98e6-6add6d69b161"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 6, 6, 6, 6, 6, 6, 6, 6, 6])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder \n",
    "\n",
    "Le = LabelEncoder()\n",
    "train_image_labels = Le.fit_transform(train_image_labels)\n",
    "\n",
    "train_image_labels[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zbzGJlYZItH1",
    "outputId": "602007bb-140e-4251-f80b-c2d117a6ac30"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.]], dtype=float32)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_image_labels = tf.keras.utils.to_categorical(train_image_labels)\n",
    "\n",
    "train_image_labels[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "HqZc8F20IwXk"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split \n",
    "\n",
    "Train_paths , Val_paths , Train_labels , Val_labels = train_test_split(train_image_paths , train_image_labels , test_size = 0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qoDY6HQSIzSS",
    "outputId": "da547cb2-00bd-4ac9-e794-9b9dcb21dc22"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: 1.801918, 1: 16.817902, 2: 1.7924342, 3: 1.0, 4: 1.4778953, 5: 1.5144525, 6: 2.2619345}\n"
     ]
    }
   ],
   "source": [
    "# Compute class weights \n",
    "\n",
    "classTotals = Train_labels.sum(axis=0)\n",
    "classWeight = classTotals.max() / classTotals\n",
    "\n",
    "class_weight = {e : weight for e , weight in enumerate(classWeight)}\n",
    "print(class_weight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "gwvMew7gI3jB"
   },
   "outputs": [],
   "source": [
    "# Function used for Transformation\n",
    "\n",
    "def load(image , label):\n",
    "    image = tf.io.read_file(image)\n",
    "    image = tf.io.decode_jpeg(image , channels = 3)\n",
    "    return image , label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "NxTxMnS7I67Q"
   },
   "outputs": [],
   "source": [
    "# Define IMAGE SIZE and BATCH SIZE \n",
    "IMG_SIZE = 96 \n",
    "BATCH_SIZE = 32\n",
    "\n",
    "# Basic Transformation\n",
    "resize = tf.keras.Sequential([\n",
    "    tf.keras.layers.experimental.preprocessing.Resizing(IMG_SIZE, IMG_SIZE)          \n",
    "])\n",
    "\n",
    "# Data Augmentation\n",
    "data_augmentation = tf.keras.Sequential([\n",
    "    tf.keras.layers.experimental.preprocessing.RandomFlip(\"horizontal\"),\n",
    "    tf.keras.layers.experimental.preprocessing.RandomRotation(0.1),\n",
    "    tf.keras.layers.experimental.preprocessing.RandomZoom(height_factor = (-0.1, -0.05))\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "lMgViymiI9GF"
   },
   "outputs": [],
   "source": [
    "# Function used to Create a Tensorflow Data Object\n",
    "AUTOTUNE = tf.data.experimental.AUTOTUNE\n",
    "def get_dataset(paths , labels , train = True):\n",
    "    image_paths = tf.convert_to_tensor(paths)\n",
    "    labels = tf.convert_to_tensor(labels)\n",
    "\n",
    "    image_dataset = tf.data.Dataset.from_tensor_slices(image_paths)\n",
    "    label_dataset = tf.data.Dataset.from_tensor_slices(labels)\n",
    "\n",
    "    dataset = tf.data.Dataset.zip((image_dataset , label_dataset))\n",
    "\n",
    "    dataset = dataset.map(lambda image , label : load(image , label))\n",
    "    dataset = dataset.map(lambda image, label: (resize(image), label) , num_parallel_calls=AUTOTUNE)\n",
    "    dataset = dataset.shuffle(1000)\n",
    "    dataset = dataset.batch(BATCH_SIZE)\n",
    "\n",
    "    if train:\n",
    "        dataset = dataset.map(lambda image, label: (data_augmentation(image), label) , num_parallel_calls=AUTOTUNE)\n",
    "    \n",
    "    dataset = dataset.repeat()\n",
    "    return dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "-wR96uvZI_jZ",
    "outputId": "5d3e6100-c322-451e-d76c-6d0b1de6b2e8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 882 ms, sys: 10.8 ms, total: 893 ms\n",
      "Wall time: 1.42 s\n",
      "(32, 96, 96, 3)\n",
      "(32, 7)\n"
     ]
    }
   ],
   "source": [
    "# Creating Train Dataset object and Verifying it\n",
    "%time train_dataset = get_dataset(Train_paths , Train_labels)\n",
    "\n",
    "image , label = next(iter(train_dataset))\n",
    "print(image.shape)\n",
    "print(label.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 303
    },
    "id": "-7hvRvgmJET5",
    "outputId": "ffda5706-de0b-43a8-f374-b61e3a1e2f44"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sad\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f6417e57590>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View a sample Training Image\n",
    "print(Le.inverse_transform(np.argmax(label , axis = 1))[0])\n",
    "plt.imshow((image[0].numpy()/255).reshape(96 , 96 , 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ZhFN58AvJHi2",
    "outputId": "e0a2c32d-2c87-4935-c1c4-0c21ef56733a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 42.2 ms, sys: 666 µs, total: 42.8 ms\n",
      "Wall time: 56.6 ms\n",
      "(32, 96, 96, 3)\n",
      "(32, 7)\n"
     ]
    }
   ],
   "source": [
    "%time val_dataset = get_dataset(Val_paths , Val_labels , train = False)\n",
    "\n",
    "image , label = next(iter(val_dataset))\n",
    "print(image.shape)\n",
    "print(label.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 303
    },
    "id": "eaRTUJArJM3l",
    "outputId": "70844cc6-0c13-4fb3-be9e-342ebf91e80f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fear\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f64131ced90>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View a sample Validation Image\n",
    "print(Le.inverse_transform(np.argmax(label , axis = 1))[0])\n",
    "plt.imshow((image[0].numpy()/255).reshape(96 , 96 , 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qLtADE03JPg-",
    "outputId": "56a66fed-f987-4a61-b6f6-cf886f1f8f3b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/keras-applications/efficientnetb2_notop.h5\n",
      "31790344/31790344 [==============================] - 2s 0us/step\n",
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " efficientnetb2 (Functional)  (None, 3, 3, 1408)       7768569   \n",
      "                                                                 \n",
      " global_average_pooling2d (G  (None, 1408)             0         \n",
      " lobalAveragePooling2D)                                          \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 1408)              0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 128)               180352    \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 7)                 903       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 7,949,824\n",
      "Trainable params: 7,882,249\n",
      "Non-trainable params: 67,575\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Building EfficientNet model\n",
    "from tensorflow.keras.applications import EfficientNetB2\n",
    "\n",
    "backbone = EfficientNetB2(\n",
    "    input_shape=(96, 96, 3),\n",
    "    include_top=False\n",
    ")\n",
    "\n",
    "model = tf.keras.Sequential([\n",
    "    backbone,\n",
    "    tf.keras.layers.GlobalAveragePooling2D(),\n",
    "    tf.keras.layers.Dropout(0.3),\n",
    "    tf.keras.layers.Dense(128, activation='relu'),\n",
    "    tf.keras.layers.Dense(7, activation='softmax')\n",
    "])\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "4TPk9SUQJTC0"
   },
   "outputs": [],
   "source": [
    "# Compiling your model by providing the Optimizer , Loss and Metrics\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07),\n",
    "    loss = 'categorical_crossentropy',\n",
    "    metrics=['accuracy' , tf.keras.metrics.Precision(name='precision'),tf.keras.metrics.Recall(name='recall')]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "W_5DnqoXJalm",
    "outputId": "9e7cc156-1d4d-4a1d-ffb2-33608eb7626c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/12\n",
      "672/672 [==============================] - 1998s 3s/step - loss: 2.8616 - accuracy: 0.3919 - precision: 0.6418 - recall: 0.1787 - val_loss: 1.5369 - val_accuracy: 0.4449 - val_precision: 0.6167 - val_recall: 0.2613\n",
      "Epoch 2/12\n",
      "672/672 [==============================] - 1989s 3s/step - loss: 2.3869 - accuracy: 0.4904 - precision: 0.6929 - recall: 0.2899 - val_loss: 1.2903 - val_accuracy: 0.5219 - val_precision: 0.7153 - val_recall: 0.3228\n",
      "Epoch 3/12\n",
      "672/672 [==============================] - 2002s 3s/step - loss: 2.2194 - accuracy: 0.5230 - precision: 0.7065 - recall: 0.3327 - val_loss: 1.2504 - val_accuracy: 0.5194 - val_precision: 0.7308 - val_recall: 0.3258\n",
      "Epoch 4/12\n",
      "672/672 [==============================] - 2094s 3s/step - loss: 2.1443 - accuracy: 0.5360 - precision: 0.7097 - recall: 0.3538 - val_loss: 1.2129 - val_accuracy: 0.5509 - val_precision: 0.6811 - val_recall: 0.4226\n",
      "Epoch 5/12\n",
      "672/672 [==============================] - 2065s 3s/step - loss: 2.0557 - accuracy: 0.5569 - precision: 0.7139 - recall: 0.3770 - val_loss: 1.1983 - val_accuracy: 0.5569 - val_precision: 0.6719 - val_recall: 0.4234\n",
      "Epoch 6/12\n",
      "248/672 [==========>...................] - ETA: 20:19 - loss: 2.0483 - accuracy: 0.5629 - precision: 0.7172 - recall: 0.3868"
     ]
    }
   ],
   "source": [
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    steps_per_epoch=len(Train_paths)//BATCH_SIZE,\n",
    "    epochs=12,\n",
    "    validation_data=val_dataset,\n",
    "    validation_steps = len(Val_paths)//BATCH_SIZE,\n",
    "    class_weight=class_weight\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "CFwGPDFZJcwE"
   },
   "outputs": [],
   "source": [
    "model.layers[0].trainable = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "pscHdPW0WQyz"
   },
   "outputs": [],
   "source": [
    "# Defining our callbacks \n",
    "checkpoint = tf.keras.callbacks.ModelCheckpoint(\"best_weights.h5\",verbose=1,save_best_only=True,save_weights_only = True)\n",
    "early_stop = tf.keras.callbacks.EarlyStopping(patience=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "pVNrB99mWTXR"
   },
   "outputs": [],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Xdg67XlIWW7U"
   },
   "outputs": [],
   "source": [
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    steps_per_epoch=len(Train_paths)//BATCH_SIZE,\n",
    "    epochs=8,\n",
    "    callbacks=[checkpoint , early_stop],\n",
    "    validation_data=val_dataset,\n",
    "    validation_steps = len(Val_paths)//BATCH_SIZE,\n",
    "    class_weight=class_weight\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Gulbk5OtWaD0"
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.applications import EfficientNetB2\n",
    "\n",
    "backbone = EfficientNetB2(\n",
    "    input_shape=(96, 96, 3),\n",
    "    include_top=False\n",
    ")\n",
    "\n",
    "model = tf.keras.Sequential([\n",
    "    backbone,\n",
    "    tf.keras.layers.GlobalAveragePooling2D(),\n",
    "    tf.keras.layers.Dropout(0.3),\n",
    "    tf.keras.layers.Dense(128, activation='relu'),\n",
    "    tf.keras.layers.Dense(7, activation='softmax')\n",
    "])\n",
    "\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07),\n",
    "    loss = 'categorical_crossentropy',\n",
    "    metrics=['accuracy' , tf.keras.metrics.Precision(name='precision'),tf.keras.metrics.Recall(name='recall')]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "-wMDRN0dWccl"
   },
   "outputs": [],
   "source": [
    "# Create a Dataset Object for 'Testing' Set just the way we did for Training and Validation\n",
    "test_image_paths = list(test_path.glob(\"*/*\"))\n",
    "test_image_paths = list(map(lambda x : str(x) , test_image_paths))\n",
    "test_labels = list(map(lambda x : get_label(x) , test_image_paths))\n",
    "\n",
    "test_labels = Le.transform(test_labels)\n",
    "test_labels = tf.keras.utils.to_categorical(test_labels)\n",
    "\n",
    "test_image_paths = tf.convert_to_tensor(test_image_paths)\n",
    "test_labels = tf.convert_to_tensor(test_labels)\n",
    "\n",
    "def decode_image(image , label):\n",
    "    image = tf.io.read_file(image)\n",
    "    image = tf.io.decode_jpeg(image , channels = 3)\n",
    "    image = tf.image.resize(image , [96 , 96] , method=\"bilinear\")\n",
    "    return image , label\n",
    "\n",
    "test_dataset = (\n",
    "     tf.data.Dataset\n",
    "    .from_tensor_slices((test_image_paths, test_labels))\n",
    "    .map(decode_image)\n",
    "    .batch(BATCH_SIZE)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "nEHKbQZZWers"
   },
   "outputs": [],
   "source": [
    "# Verify Test Dataset Object\n",
    "image , label = next(iter(test_dataset))\n",
    "print(image.shape)\n",
    "print(label.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "CloVnM_yWhKM"
   },
   "outputs": [],
   "source": [
    "# View a sample Validation Image\n",
    "print(Le.inverse_transform(np.argmax(label , axis = 1))[0])\n",
    "plt.imshow((image[0].numpy()/255).reshape(96 , 96 , 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "pz6zqpxQWixb"
   },
   "outputs": [],
   "source": [
    "# Evaluating the loaded model\n",
    "loss, acc, prec, rec = model.evaluate(test_dataset)\n",
    "\n",
    "print(\" Testing Acc : \" , acc)\n",
    "print(\" Testing Precision \" , prec)\n",
    "print(\" Testing Recall \" , rec)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "d3uSnTFCWpR8"
   },
   "source": [
    "Save Objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "HDgtGpKAWp7I"
   },
   "outputs": [],
   "source": [
    "# Save Model\n",
    "model.save(\"FacialExpressionModel.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "EoGKQ4bCWtjz"
   },
   "outputs": [],
   "source": [
    "# Save Label Encoder \n",
    "import pickle\n",
    "\n",
    "def save_object(obj , name):\n",
    "    pickle_obj = open(f\"{name}.pck\",\"wb\")\n",
    "    pickle.dump(obj, pickle_obj)\n",
    "    pickle_obj.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "lt3FOz51WxVx"
   },
   "outputs": [],
   "source": [
    "save_object(Le, \"LabelEncoder\")"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
